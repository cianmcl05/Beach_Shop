import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import ttk  # For Treeview
import screens.manager_view
import screens.owner_view

class EmployeesScreen(tb.Frame):
    def __init__(self, master, user_role="manager"):  # Accept user_role in constructor
        super().__init__(master, bootstyle="flatly", padding=20)
        self.user_role = user_role  # Store the role

        # Configure a custom style for buttons
        style = tb.Style()
        style.configure("Custom.TButton", font=("Helvetica", 12, "bold"))

        # Header
        header = tb.Label(self, text="Employees", font=("Helvetica", 16, "bold"),
                          bootstyle="info", padding=(20, 5))
        header.pack(pady=10, fill="x")

        # Table Frame
        self.table_frame = tb.Frame(self, bootstyle="flatly")
        self.table_frame.pack(pady=10, fill="both", expand=True)

        # Treeview (Table) using ttk Treeview widget
        columns = ("Name", "Phone", "Email", "Role", "Username", "Password")
        self.tree = ttk.Treeview(self.table_frame, columns=columns, show="headings")
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=120)
        self.tree.pack(fill="both", expand=True)

        # Buttons
        self.create_buttons(master)

        # Add Employee Button
        self.add_employee_button = tb.Button(self, text="Add Employee", style="Custom.TButton",
                                             bootstyle="secondary", width=15,
                                             command=self.open_add_employee_window)
        self.add_employee_button.pack(pady=5)

    def create_buttons(self, master):
        button_frame = tb.Frame(self, bootstyle="flatly")
        button_frame.pack(pady=5)

        # Back Button logic based on user role
        if self.user_role == "manager":
            back_command = lambda: master.show_frame(screens.manager_view.ManagerView)
        else:
            back_command = lambda: master.show_frame(screens.owner_view.OwnerView)

        tb.Button(button_frame, text="Back", style="Custom.TButton", bootstyle="success", width=10,
                  command=back_command).pack(side="left", padx=10)

        # Save Button
        tb.Button(button_frame, text="Save", style="Custom.TButton", bootstyle="warning", width=10,
                  command=self.save_data).pack(side="left", padx=10)

    def open_add_employee_window(self):
        add_window = tb.Toplevel(self, bootstyle="flatly", padding=20)
        add_window.title("Add Employee")

        # Form Labels & Entry Fields using helper method
        self.name_entry = self.create_label_entry(add_window, "Name:")
        self.phone_entry = self.create_label_entry(add_window, "Phone:")
        self.email_entry = self.create_label_entry(add_window, "Email:")
        self.role_entry = self.create_label_entry(add_window, "Role:")
        self.username_entry = self.create_label_entry(add_window, "Username:")
        self.password_entry = self.create_label_entry(add_window, "Password:")

        # Buttons for Confirm and Back
        self.create_add_employee_buttons(add_window)

    def create_label_entry(self, parent, text):
        tb.Label(parent, text=text, font=("Helvetica", 12), bootstyle="secondary").pack(anchor="w", padx=20, pady=5)
        entry = tb.Entry(parent, font=("Helvetica", 12), bootstyle="dark", width=30)
        entry.pack(anchor="w", padx=20, pady=5)
        return entry

    def create_add_employee_buttons(self, add_window):
        button_frame = tb.Frame(add_window, bootstyle="flatly")
        button_frame.pack(pady=10)

        # Back Button
        tb.Button(button_frame, text="Back", style="Custom.TButton", bootstyle="success", width=10,
                  command=add_window.destroy).pack(side="left", padx=10)

        # Confirm Button
        tb.Button(button_frame, text="Confirm", style="Custom.TButton", bootstyle="warning", width=10,
                  command=lambda: self.confirm_add(add_window)).pack(side="left", padx=10)

    def confirm_add(self, window):
        employee_data = (
            self.name_entry.get(), self.phone_entry.get(), self.email_entry.get(),
            self.role_entry.get(), self.username_entry.get(), self.password_entry.get()
        )
        self.tree.insert("", "end", values=employee_data)
        window.destroy()

    def save_data(self):
        print("Data saved!")  # Placeholder for actual data-saving logic
