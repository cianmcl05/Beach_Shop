import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import messagebox
import screens.emp_view
import screens.manager_view  # For manager view navigation
import screens.owner_view    # For owner view navigation
import sql_connection

class EndOfDaySalesScreen(tb.Frame):
    def __init__(self, master, user_role, emp_id=None):
        super().__init__(master, bootstyle="flatly", padding=20)
        self.user_role = user_role
        self.emp_id = emp_id

        # Configure a custom style for buttons
        style = tb.Style()
        style.configure("Custom.TButton", font=("Helvetica", 12, "bold"))

        # Header Label
        header = tb.Label(
            self, 
            text="End of Day\nSales",
            font=("Helvetica", 16, "bold"),
            bootstyle="info",
            padding=(20, 5)
        )
        header.pack(pady=10, fill="x")

        # Input Fields
        self.reg_entry = self.create_label_entry("Reg:")
        self.credit_entry = self.create_label_entry("Credit:")
        self.cash_in_envelope_entry = self.create_label_entry("Cash in Envelope:")

        # Buttons
        self.create_buttons(master)

    def create_label_entry(self, text, show=""):
        tb.Label(
            self, text=text,
            font=("Helvetica", 12),
            bootstyle="secondary"
        ).pack(anchor="w", padx=20, pady=5)
        entry = tb.Entry(
            self, font=("Helvetica", 12),
            bootstyle="dark", width=30,
            show=show
        )
        entry.pack(anchor="w", padx=20, pady=5)
        return entry

    def create_buttons(self, master):
        button_frame = tb.Frame(self, bootstyle="flatly")
        button_frame.pack(pady=10)

        # Determine the proper back screen based on user role
        if self.user_role == "employee":
            back_screen = screens.emp_view.EmployeeView
        elif self.user_role == "manager":
            back_screen = screens.manager_view.ManagerView
        else:
            back_screen = screens.owner_view.OwnerView

        # Back Button using custom style
        tb.Button(
            button_frame, text="Back",
            style="Custom.TButton", bootstyle="success",
            width=10,
            command=lambda: master.show_frame(back_screen)
        ).pack(side="left", padx=10)

        # Confirm Button using custom style
        tb.Button(
            button_frame, text="Confirm",
            style="Custom.TButton", bootstyle="warning",
            width=10,
            command=self.confirm
        ).pack(side="left", padx=10)

    def confirm(self):
        reg = self.reg_entry.get()
        credit = self.credit_entry.get()
        cash_in_envelope = self.cash_in_envelope_entry.get()

        if not reg or not credit or not cash_in_envelope:
            messagebox.showwarning("Missing Information", "Please fill in all fields.")
            return

        try:
            reg = float(reg)
            credit = float(credit)
            cash_in_envelope = float(cash_in_envelope)
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter valid decimal numbers.")
            return

        from sql_connection import insert_end_of_day_sales
        success = insert_end_of_day_sales(reg, credit, cash_in_envelope, self.emp_id)

        if success:
            messagebox.showinfo("Sales Recorded", "End of day sales recorded successfully!")
        else:
            messagebox.showerror("Error", "Failed to save sales record.")
